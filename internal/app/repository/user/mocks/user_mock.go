// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/repository/user/user.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	entity "dating-service/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockUserRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockUserRepositoryMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockUserRepository)(nil).BeginTx), ctx)
}

// CheckPremium mocks base method.
func (m *MockUserRepository) CheckPremium(ctx context.Context) (*entity.GetUserDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPremium", ctx)
	ret0, _ := ret[0].(*entity.GetUserDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPremium indicates an expected call of CheckPremium.
func (mr *MockUserRepositoryMockRecorder) CheckPremium(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPremium", reflect.TypeOf((*MockUserRepository)(nil).CheckPremium), ctx)
}

// CheckUserSwipped mocks base method.
func (m *MockUserRepository) CheckUserSwipped(ctx context.Context, request entity.SwipeRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserSwipped", ctx, request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserSwipped indicates an expected call of CheckUserSwipped.
func (mr *MockUserRepositoryMockRecorder) CheckUserSwipped(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserSwipped", reflect.TypeOf((*MockUserRepository)(nil).CheckUserSwipped), ctx, request)
}

// CommitTx mocks base method.
func (m *MockUserRepository) CommitTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockUserRepositoryMockRecorder) CommitTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockUserRepository)(nil).CommitTx), ctx, tx)
}

// CountUserSwipped mocks base method.
func (m *MockUserRepository) CountUserSwipped(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserSwipped", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserSwipped indicates an expected call of CountUserSwipped.
func (mr *MockUserRepositoryMockRecorder) CountUserSwipped(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserSwipped", reflect.TypeOf((*MockUserRepository)(nil).CountUserSwipped), ctx)
}

// CreateMatch mocks base method.
func (m *MockUserRepository) CreateMatch(ctx context.Context, tx *sql.Tx, request entity.SwipeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatch", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMatch indicates an expected call of CreateMatch.
func (mr *MockUserRepositoryMockRecorder) CreateMatch(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatch", reflect.TypeOf((*MockUserRepository)(nil).CreateMatch), ctx, tx, request)
}

// CreateSwipe mocks base method.
func (m *MockUserRepository) CreateSwipe(ctx context.Context, tx *sql.Tx, request entity.SwipeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwipe", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSwipe indicates an expected call of CreateSwipe.
func (mr *MockUserRepositoryMockRecorder) CreateSwipe(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwipe", reflect.TypeOf((*MockUserRepository)(nil).CreateSwipe), ctx, tx, request)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*entity.GetUserDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.GetUserDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserList mocks base method.
func (m *MockUserRepository) GetUserList(ctx context.Context) ([]*entity.GetUserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList", ctx)
	ret0, _ := ret[0].([]*entity.GetUserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockUserRepositoryMockRecorder) GetUserList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockUserRepository)(nil).GetUserList), ctx)
}

// RollbackTx mocks base method.
func (m *MockUserRepository) RollbackTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockUserRepositoryMockRecorder) RollbackTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockUserRepository)(nil).RollbackTx), ctx, tx)
}

// Signup mocks base method.
func (m *MockUserRepository) Signup(ctx context.Context, request entity.SignupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockUserRepositoryMockRecorder) Signup(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserRepository)(nil).Signup), ctx, request)
}
